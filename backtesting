from yfinance import download
import datetime
import pandas as pd
import matplotlib.pyplot as plt

tickerSymbol = 'KECL.NS'

start_date = datetime.datetime(2022, 3, 20)
#start_date = datetime.datetime(2021, 7, 21)

end_date = datetime.datetime.now()

data=download(tickerSymbol, start=start_date, end=end_date).reset_index()[["Date","Close"]]


purchase_data = pd.DataFrame(columns=['Date', 'Close','Quantity'])
sell_data = pd.DataFrame(columns=['Date', 'Close','Quantity'])

last_trad=data.Close[0]

fund=0



for i in range(len(data)):
    
    percent_hike=((data.Close[i]-last_trad)/last_trad)*100
    
    
    if percent_hike>26:
        #percent is greater than 0.9 hence, selling
        
        sell_quantity=round(percent_hike)
        
        sell_amount=round(sell_quantity)*(data.Close[i])
        
        last_trad=data.Close[i]
        
        if fund<sell_amount:
            print(f"\nCant sell {round(sell_quantity*0.4)} shares because of insufficient Fund. {sell_quantity}% increases\n")
            continue
                    
        
        fund=fund-sell_amount
                
        sell_data=pd.concat([sell_data, data.loc[[i]]], ignore_index=True)
        sell_data.Quantity.fillna(sell_quantity, inplace=True)
       
        print(f" {round(percent_hike,1)}, {round(sell_quantity)} x {round(data.Close[i],1)} = {round(sell_amount,1)}")        
        
        
    if percent_hike<-4.5:
        #percent is greater than 0.9 hence, purchasing
        
        purchase_quantity=round(percent_hike)
        purchase_amount=purchase_quantity*(data.Close[i])         
        
        last_trad=data.Close[i] 
        fund=fund-purchase_amount
        
        purchase_data=pd.concat([purchase_data, data.loc[[i]]], ignore_index=True)
        purchase_data.Quantity.fillna(-purchase_quantity, inplace=True)
        
        print(f"{round(percent_hike,1)},  {round(purchase_quantity)} x {round(data.Close[i],1)} =  {round(purchase_amount,1)}")
        
        
        

purchase_data["Total"]=purchase_data["Close"]*purchase_data["Quantity"]
sell_data["Total"]=sell_data["Close"]*sell_data["Quantity"]

current_shares_in_market=sum(purchase_data["Quantity"])-sum(sell_data["Quantity"])
lst_price=data.Close[len(data)-1]
total_purchase=sum(purchase_data["Total"])
total_sell=sum(sell_data["Total"])
profit=(total_sell-total_purchase)+(lst_price*current_shares_in_market)

print(f"\nFund In Market Currently = {current_shares_in_market} x {lst_price} = {current_shares_in_market*lst_price}")
print(f"Amount Withdrawl = {round(total_sell,2)}")
print(f"Amount Invested = {round(total_purchase,2)}")
print(f"Profit= {profit}")
print(f"Percentage= {round((profit)/total_purchase*100,2)}")



#Plotting On Graph
fig, ax = plt.subplots(figsize=(10, 4))

for index, row in sell_data.iterrows():
    ax.text(row['Date'], row['Close'], int(-row['Quantity']), ha='center', va='bottom')
    
for index, row in purchase_data.iterrows():
    ax.text(row['Date'], row['Close'], int(row['Quantity']), ha='center', va='bottom')

data.plot(kind='line',x="Date", y="Close", color='green', ax=ax)
sell_data.plot(kind='scatter',x="Date", y="Close", color='green', s=40, ax=plt.gca())
purchase_data.plot(kind='scatter',x="Date", y="Close", color='red', s=40, ax=plt.gca())
plt.ion()
mpldatacursor.datacursor(hover=True)

plt.show()

pd.concat([sell_data, purchase_data]).sort_values('Date')
